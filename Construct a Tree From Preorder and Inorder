int find(vector<int>& inorder, int target , int start , int end){
    for(int i=start;i<=end;i++){
        if(inorder[i] == target){
            return i;
        }
    }
    return -1;
}

TreeNode *solve(vector<int>& inorder,vector<int>& preorder, int instart, int inend, int index){
    if(instart > inend){
            return NULL;
        }
    TreeNode *root = new TreeNode(preorder[index]);
    int pos = find(inorder,preorder[index],instart, inend);

    root->left = solve(inorder, preorder, instart , pos-1, index+1);
    root->right = solve(inorder, preorder, pos+1, inend, index+(pos-instart)+1);

    return root;
}


    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        int n = inorder.size();

        return solve(inorder,preorder,0,n-1,0);
        
    }
};
