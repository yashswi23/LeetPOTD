class Solution {

    public void dfs(int i, int j, char[][]board,int[][] vis){
        vis[i][j]=1;
        int[] delrow={-1,0,1,0};
        int[] delcol={0,1,0,-1};
         int n = board.length;
        int m = board[0].length;
        for(int def=0;def<4;def++){
            int nrow = i+delrow[def];
            int ncol = j+delcol[def];
            if(nrow>=0 && nrow<n && ncol>=0 && ncol<m && board[nrow][ncol]=='O' && vis[nrow][ncol]==0){
                dfs(nrow,ncol,board,vis);
            }
        }
    }
    public void solve(char[][] board) {
        int n = board.length;
        int m = board[0].length;
        int [][] vis = new int[n][m];

        for(int j=0;j<m;j++){
            if(board[0][j] == 'O' && vis[0][j]==0){
                dfs(0,j,board,vis);
            }
            if(board[n-1][j]=='O' && vis[n-1][j]==0){
                dfs(n-1,j,board,vis);
            }
        }
        for(int i=0;i<n;i++){
            if(board[i][0] == 'O' && vis[i][0]==0){
                dfs(i,0,board,vis);
            }
            if(board[i][m-1]=='O' && vis[i][m-1]==0){
                dfs(i,m-1,board,vis);
            }
        }

        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(vis[i][j]==0 && board[i][j]=='O'){
                    board[i][j]='X';
                }
            }
        }
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                System.out.print(board[i][j]+" ");
            }
            System.out.println();
        }

       
    }
}
