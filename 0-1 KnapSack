class Solution {
    static int t[][];
    
    static int solve(int []wt, int[] val, int W, int n){
        
        if(n == 0 || W==0){
            return 0;
        }
        if(t[n][W]!=-1){
            return t[n][W];
        }
        
        if(wt[n-1]<=W){
            return t[n][W]=Math.max(val[n-1]+solve(wt,val,W-wt[n-1],n-1), solve(wt,val,W,n-1));
        }
        else{
            return t[n][W]=solve(wt,val,W,n-1);
        }
    }
    static int knapsack(int W, int val[], int wt[]) {
        // code here
        int n = wt.length;
         t= new int[n+1][W+1];
       for (int[] row : t) {
            Arrays.fill(row, -1);
        }
        return solve(wt,val,W,n);
    }
}
