class Solution {
public:
    long long countGoodIntegers(int n, int k) {
        unordered_set<string> st ;
        int d = (n+1)/2;
        int start = pow(10,d-1);
        int end = pow(10,d)-1;

        for(int num = start;num<=end;num++){
            string lefthalf = to_string(num);
            string full = "";

            if(n%2== 0){
                string righthalf = lefthalf;
                reverse(righthalf.begin(),righthalf.end());
                full = lefthalf+righthalf;
            }
            else{
                string righthalf = lefthalf.substr(0,d-1);
                reverse(righthalf.begin(),righthalf.end());
                full = lefthalf+righthalf;
            }

            long long number = stoll(full);

            if(number%k!=0){
                continue;
            }

            sort(full.begin(),full.end());
            st.insert(full);
        }

            vector<long long> fact(11,1);
            for(int i=1;i<11;i++){
                fact[i] = fact[i-1]*i;
            }

            long long res=0;
            for(const string &s: st){
                vector<long long> count(10);
                for(const char &c:s){
                    count[c-'0']++;
                }

                int totaldig = s.length();
                int zerodig = count[0];
                int nonzero = totaldig - zerodig;

                long long perm = nonzero* fact[totaldig-1];
                for(int i=0;i<10;i++){
                    perm/= fact[count[i]];
                }

                res+= perm;

            }

        return res;
    }
};
